package org.nsu.fit.services.rest;

import org.glassfish.jersey.client.ClientConfig;
import org.nsu.fit.services.generator.FakerGenerator;
import org.nsu.fit.services.generator.UserGenerator;
import org.nsu.fit.services.log.Logger;
import org.nsu.fit.services.rest.data.AccountTokenPojo;
import org.nsu.fit.services.rest.data.CredentialsPojo;
import org.nsu.fit.services.rest.data.CustomerPojo;
import org.nsu.fit.services.rest.data.PlanPojo;
import org.nsu.fit.shared.JsonMapper;

import javax.ws.rs.client.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.Optional;

import static javax.ws.rs.core.Response.Status.Family.CLIENT_ERROR;
import static javax.ws.rs.core.Response.Status.Family.SERVER_ERROR;

public class RestClient {
    // Note: change url if you want to use the docker compose.
//    private static final String REST_URI = "http://localhost:8080/tm-backend/rest";
    private static final String REST_URI = "http://localhost:8089/tm-backend/rest";

    private static final Client client = ClientBuilder.newClient(new ClientConfig().register(RestClientLogFilter.class));

    private final UserGenerator userGenerator = new FakerGenerator();

    public AccountTokenPojo authenticate(String login, String pass) {
        CredentialsPojo credentialsPojo = new CredentialsPojo(login, pass);

        return post(
                "authenticate",
                JsonMapper.toJson(credentialsPojo, true),
                AccountTokenPojo.class,
                null
        );
    }

    public PlanPojo createPlan(PlanPojo planPojo, AccountTokenPojo accountToken) {
        return post(
                "plans",
                JsonMapper.toJson(planPojo, true),
                PlanPojo.class,
                accountToken
        );
    }

    public CustomerPojo createAutoGeneratedCustomer(AccountTokenPojo accountToken) {
        return createCustomer(userGenerator.generateCustomer(), accountToken);
    }

    public CustomerPojo createCustomer(CustomerPojo customerPojo, AccountTokenPojo accountToken) {
        return post(
                "customers",
                JsonMapper.toJson(customerPojo, true),
                CustomerPojo.class,
                accountToken
        );
    }


    private static <R> R post(String path, String body, Class<R> responseType, AccountTokenPojo accountToken) {
        // Лабораторная 3: Добавить обработку Responses и Errors. Выводите их в лог.
        // Подумайте почему в filter нет Response чтобы можно было удобно его сохранить.
        Invocation.Builder request = client
                .target(REST_URI)
                .path(path)
                .request(MediaType.APPLICATION_JSON)
                .accept(MediaType.APPLICATION_JSON);

        if (accountToken != null) {
            request.header("Authorization", "Bearer " + accountToken.token);
        }

        Response response = request.post(Entity.entity(body, MediaType.APPLICATION_JSON));
        String jsonBody = getBody(response, String.class);

        Logger.debug("Response body --" + jsonBody);
        return JsonMapper.fromJson(jsonBody, responseType);
    }

    private static <V> V getBody(Response response, Class<V> clazz) {
        Optional<Response> responseOptional = Optional.ofNullable(response);
        boolean isError = responseOptional.map(Response::getStatusInfo)
                .map(Response.StatusType::getFamily)
                .filter(family -> CLIENT_ERROR.equals(family) || SERVER_ERROR.equals(family))
                .isPresent();

        if (isError) {
            RuntimeException exc = new RuntimeException(
                    responseOptional.map(resp -> resp.readEntity(String.class))
                            .orElse("")
            );
            Logger.error("Error during request: ", exc);
            throw exc;
        }

        return responseOptional.map(resp -> resp.readEntity(clazz))
                .orElse(null);
    }

    private static class RestClientLogFilter implements ClientRequestFilter {
        @Override
        public void filter(ClientRequestContext requestContext) {
            Logger.debug("Request method -- " + requestContext.getMethod());
            Logger.debug("Request headers --" + requestContext.getHeaders());
//            Logger.debug("Request body --" + requestContext.getEntity());
        }
    }
}
